name: Build and Deploy to GKE

on:
  push:
    branches: [ master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE: kafka-bq-performance
  REGION: us
  REPO: kafka-bq-images

jobs:
  build-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Authenticate Docker with Artifact Registry
      run: |
        gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

    - name: Build Docker image
      run: |
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPO/$IMAGE:$GITHUB_SHA .
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPO/$IMAGE:$GITHUB_SHA

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Create BigQuery credentials Secret
      run: |
        echo "${{ secrets.BQ_CREDENTIALS }}" | base64 -d > credentials.json
        kubectl delete secret bigquery-credentials --ignore-not-found
        kubectl create secret generic bigquery-credentials --from-file=credentials.json=credentials.json
        rm credentials.json

    - name: Apply ConfigMap
      run: |
        sed -i.bak "s/\${BQ_PROJECT_ID}/${BQ_PROJECT_ID}/g" ./k8s/configmap.yaml
        sed -i.bak "s/\${BQ_DATASET}/${BQ_DATASET}/g" ./k8s/configmap.yaml
        sed -i.bak "s/\${BQ_TABLE}/${BQ_TABLE}/g" ./k8s/configmap.yaml
        kubectl apply -f ./k8s/configmap.yaml
        rm ./k8s/configmap.yaml.bak

    - name: Deploy to GKE
      run: |
        sed -i.bak "s|us.gcr.io/PROJECT_ID/kafka-bq-performance:VERSION|$REGION-docker.pkg.dev/$PROJECT_ID/$REPO/$IMAGE:$GITHUB_SHA|g" ./k8s/deployment.yaml
        kubectl apply -f ./k8s/deployment.yaml
        kubectl apply -f ./k8s/service.yaml
        kubectl rollout status deployment/kafka-bq-deployment
        rm ./k8s/deployment.yaml.bak

    - name: Get External IP
      run: |
        echo "Waiting for external IP..."
        for i in {1..20}; do
          IP=$(kubectl get svc kafka-bq-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$IP" ]]; then
            echo "Service available at: http://$IP"
            exit 0
          fi
          sleep 10
        done
        echo "Failed to retrieve external IP after waiting."
        exit 1
